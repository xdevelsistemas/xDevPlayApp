import sbt._
import sbt.Keys._
import play.Project._
import com.typesafe.sbteclipse.core.EclipsePlugin.EclipseKeys




trait Options extends sbt.Build {
  val verbose   : Boolean
  val unchecked : Boolean
  val debug     : Boolean
  
  override def settings = super.settings ++ Seq(
      EclipseKeys.skipParents in ThisBuild := false
  )

  def defaultJavaSettings : Seq[String] = {
    val options = Seq("-encoding", "utf-8", "-proc:none")
    if (verbose)   options ++ Seq("-verbose")
    if (unchecked) options ++ Seq("-Xlint:unchecked")
    if (debug)     options ++ Seq("-g")
    options
  }

  val javaSettings = play.Project.playJavaSettings ++ Seq(
    javacOptions ++= defaultJavaSettings)

  val scalaSettings = play.Project.playScalaSettings ++ Seq(
    scalacOptions ++= Seq("-feature"))
}


trait Zap extends Options {

  val zap = TaskKey[Unit]("zap", "Removes all autogenerated files.")

  def zapTask : sbt.Def.Initialize[sbt.Task[Unit]] =
    (streams, baseDirectory).map(
      (out, basedir) => {
        Seq("project/boot", "project/project", "project/target", "target", "logs").foreach(
          folder => {
            if (verbose) println("Remove " + basedir / folder)
            IO.delete(basedir / folder)
          })
        val metamodel : PathFinder = (basedir / "modules/models/app/models") ** ("*_.java")
        metamodel.get.foreach(f => f.delete())
      })
}

trait Metamodel extends Options {

  var packageModels = "models"

  val metamodel = TaskKey[Seq[File]]("metamodel", "Generates metamodel.")

  def metamodelTask : sbt.Def.Initialize[sbt.Task[Seq[File]]] =
    (streams,
     javaSource in Compile,
     sourceManaged in Compile,
     classDirectory in Compile,
     dependencyClasspath in Compile,
     compilers in Compile).map(
      (streams, sourceDir, generatedSourceDir, classDir, classpath, compilers) => {
        IO.createDirectory(classDir)
        val srcdir = file(sourceDir + "/" + packageModels)
        println(srcdir)
        val gendir = sourceDir
        // javac compiler options
        val options = defaultJavaSettings ++ Seq(
          "-proc:only",
          "-Aeclipselink.persistencexml=conf/META-INF/persistence.xml",
          "-processor", "org.eclipse.persistence.internal.jpa.modelgen.CanonicalModelProcessor",
          "-s", gendir.getCanonicalPath)
        // remove old metamodel files
        val oldmetamodel : PathFinder = (gendir) ** ("*_.java")
        oldmetamodel.get.foreach(f => f.delete())
        // generate new metamodel files
        val sources : PathFinder = (srcdir) ** ("*.java")
        compilers.javac.apply(
          sources = sources.get,
          classpath = classpath.map(x => x.data),
          outputDirectory = classDir,
          options = options) (streams.log)
        // by convention, return list of generated files
        val result : PathFinder = (srcdir) ** ("*.java")
        result.get })
}


object Build extends sbt.Build with Zap with Metamodel {

  val appName = "xDevPlayApp"
  val appVersion = "0.1-Proconsorcio-0.1"

  val verbose   = false
  val unchecked = false
  val debug     = false


  //
  //-- dependencies
  //

  val mockitoVersion = "1.9.5"
  val json4sVersion = "3.2.7"
  val securesocialVersion = "2.1.3"

  val eclipselinkVersion = "2.5.2"


  val postgresqlVersion = "9.1-901-1.jdbc4"

  val MySQlVersion = "5.1.31"

  val xStreamVersion = "1.2.2"

  val JPAVersion = "4.3.6.Final"

  val Itext = "com.lowagie" % "itext" % "2.0.8"
  val Itextpdf = "com.itextpdf" % "itextpdf" % "5.4.5"
  val GuavaJdk5 = "com.google.guava" % "guava-jdk5" % "14.0.1"
  val CommonsIo = "commons-io" % "commons-io" % "2.4"
  val log4j =  "log4j" % "log4j" % "1.2.17"
  val commons =  "org.apache.commons" % "commons-lang3" % "3.3.2"



  val essentialDeps = Seq(
    "org.mockito" % "mockito-all" % mockitoVersion % "test" exclude("org.hamcrest", "hamcrest-core"),
     "junit" % "junit" % "4.11" % "test" exclude("org.hamcrest", "hamcrest-core"),
     "org.hamcrest" % "hamcrest-all" % "1.3" % "test"
  )

  val bopepoDeps =  essentialDeps ++ Seq(
    javaCore,
    Itext,
    Itextpdf,
    GuavaJdk5,
    log4j,
    commons
  )


  val modelsDeps = essentialDeps ++ Seq(
    javaCore,
    javaJdbc,
    javaJpa.exclude("org.hibernate.javax.persistence", "hibernate-jpa-2.0-api"),
    "org.eclipse.persistence" % "eclipselink" % eclipselinkVersion,
    //"org.eclipse.persistence" % "org.eclipse.persistence.jpa.modelgen.processor" % eclipselinkVersion,
    "org.hibernate" % "hibernate-entitymanager" % JPAVersion,
    "xstream" % "xstream" % xStreamVersion,
    "mysql" % "mysql-connector-java" % MySQlVersion,
    "ws.securesocial" %% "securesocial" % securesocialVersion
  )




  val rootDeps = essentialDeps ++ Seq(
    "javax.inject" % "javax.inject" % "1",
    "com.google.inject" % "guice" % "3.0",
    "org.json4s" %% "json4s-jackson" % json4sVersion,
    "ws.securesocial" %% "securesocial" % securesocialVersion
    // To use the testkit for now compile and publish it locally
    // then uncomment this dependency.
    //"ws.securesocial" %% "securesocial-testkit" % "master-SNAPSHOT" % "test"
  )


  //
  // projects
  //

  lazy val bopepo = play.Project(
    appName + "-bopepo", appVersion,
    bopepoDeps,
    path = file("modules/bopepo"),
    settings = javaSettings
  ).settings(
      zap <<= zapTask,
      zap <<= zap.dependsOn(clean in Compile)
      , metamodel <<= metamodelTask
      , metamodel <<= metamodel.dependsOn(clean in Compile)
    )

  lazy val models = play.Project(
    appName + "-models", appVersion,
    modelsDeps,
    path = file("modules/models"),
    settings = javaSettings
  ).settings(
    zap <<= zapTask,
    zap <<= zap.dependsOn(clean in Compile)
    , metamodel <<= metamodelTask
    , metamodel <<= metamodel.dependsOn(clean in Compile)
  ).aggregate(bopepo)
   .dependsOn(bopepo)








  lazy val root = play.Project(
    appName, appVersion,
    rootDeps,
    settings = scalaSettings
  ).settings(
      zap <<= zapTask,
      zap <<= zap.dependsOn(clean in Compile)

    )
    .aggregate(models,bopepo)
    .dependsOn(models,bopepo)

}
