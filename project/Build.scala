import sbt._
import sbt.Keys._
import play.Project._
import scala.collection.JavaConverters._


trait Options extends sbt.Build {
  val verbose   : Boolean
  val unchecked : Boolean
  val debug     : Boolean

  def defaultJavaSettings : Seq[String] = {
    val options = Seq("-encoding", "utf-8", "-proc:none")
    if (verbose)   options ++ Seq("-verbose")
    if (unchecked) options ++ Seq("-Xlint:unchecked")
    if (debug)     options ++ Seq("-g")
    options
  }

  val javaSettings = play.Project.playJavaSettings ++ Seq(
    javacOptions ++= defaultJavaSettings)

  val scalaSettings = play.Project.playScalaSettings ++ Seq(
    scalacOptions ++= Seq("-feature"))
}


trait Zap extends Options {

  val zap = TaskKey[Unit]("zap", "Removes all autogenerated files.")

  def zapTask : sbt.Def.Initialize[sbt.Task[Unit]] =
    (streams, baseDirectory).map(
      (out, basedir) => {
        Seq("project/boot", "project/project", "project/target", "target", "logs").foreach(
          folder => {
            if (verbose) println("Remove " + basedir / folder)
            IO.delete(basedir / folder)
          })
        val metamodel : PathFinder = (basedir / "modules/models/app/models") ** ("*_.java")
        metamodel.get.foreach(f => f.delete())
      })
}

trait Metamodel extends Options {

  var packageModels = "models"

  val metamodel = TaskKey[Seq[File]]("metamodel", "Generates metamodel.")

  def metamodelTask : sbt.Def.Initialize[sbt.Task[Seq[File]]] =
    (streams,
     javaSource in Compile,
     sourceManaged in Compile,
     classDirectory in Compile,
     dependencyClasspath in Compile,
     compilers in Compile).map(
      (streams, sourceDir, generatedSourceDir, classDir, classpath, compilers) => {
        IO.createDirectory(classDir)
        val srcdir = file(sourceDir + "/" + packageModels)
        println(srcdir)
        val gendir = sourceDir
        // javac compiler options
        val options = defaultJavaSettings ++ Seq(
          "-proc:only",
          "-Aeclipselink.persistencexml=conf/META-INF/persistence.xml",
          "-processor", "org.eclipse.persistence.internal.jpa.modelgen.CanonicalModelProcessor",
          "-s", gendir.getCanonicalPath)
        // remove old metamodel files
        val oldmetamodel : PathFinder = (gendir) ** ("*_.java")
        oldmetamodel.get.foreach(f => f.delete())
        // generate new metamodel files
        val sources : PathFinder = (srcdir) ** ("*.java")
        compilers.javac.apply(
          sources = sources.get,
          classpath = classpath.map(x => x.data),
          outputDirectory = classDir,
          options = options) (streams.log)
        // by convention, return list of generated files
        val result : PathFinder = (srcdir) ** ("*.java")
        result.get })
}


object Build extends sbt.Build with Zap with Metamodel {

  val appName = "ProconsorcioApp"
  val appVersion = "0.1-SNAPSHOT"

  val verbose   = false
  val unchecked = false
  val debug     = false


  //
  //-- dependencies
  //

  val mockitoVersion = "1.9.5"
  val json4sVersion = "3.2.7"
  val securesocialVersion = "2.1.3"

  val eclipselinkVersion = "2.5.1"
  val hibernateVersion = "3.6.9.Final"

  val postgresqlVersion = "9.1-901-1.jdbc4"



  // resolvers += Resolver.sonatypeRepo("snapshots"),
  resolvers += Resolver.sonatypeRepo("releases")

  val essentialDeps = Seq(
    "org.mockito" % "mockito-all" % mockitoVersion % "test"
  )

  val modelsDeps = essentialDeps ++ Seq(
    javaCore,
    javaJdbc,
    javaJpa,
    "org.eclipse.persistence" % "eclipselink" % eclipselinkVersion,
    "org.eclipse.persistence" % "org.eclipse.persistence.jpa.modelgen.processor" % eclipselinkVersion,
    //"postgresql" % "postgresql" % postgresqlVersion

    "ws.securesocial" %% "securesocial" % securesocialVersion
  )



  val rootDeps = essentialDeps ++ Seq(
    "javax.inject" % "javax.inject" % "1",
    "com.google.inject" % "guice" % "3.0",
    "org.json4s" %% "json4s-jackson" % json4sVersion,
    "ws.securesocial" %% "securesocial" % securesocialVersion
    // To use the testkit for now compile and publish it locally
    // then uncomment this dependency.
    //"ws.securesocial" %% "securesocial-testkit" % "master-SNAPSHOT" % "test"
  )


  //
  // projects
  //

  lazy val models = play.Project(
    appName + "-models", appVersion,
    modelsDeps,
    path = file("modules/models"),
    settings = javaSettings
  ).settings(
    zap <<= zapTask,
    zap <<= zap.dependsOn(clean in Compile)
    , metamodel <<= metamodelTask
    , metamodel <<= metamodel.dependsOn(clean in Compile)
  )



  lazy val root = play.Project(
    appName, appVersion,
    rootDeps,
    settings = scalaSettings
  ).settings(
      zap <<= zapTask,
      zap <<= zap.dependsOn(clean in Compile)
    )
    .aggregate(models)
    .dependsOn(models)

}
