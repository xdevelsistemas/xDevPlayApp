# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
# Aplicatico principal
GET         /                              controllers.Proconsorcio.LandingPage.Home
GET         /home                          controllers.Proconsorcio.Application.home
GET         /pesquisa/:query               controllers.Proconsorcio.Application.pesquisa(query)
GET         /pesquisa                      controllers.Proconsorcio.Application.pesquisa_clean
GET         /alterarcodigo                 controllers.Proconsorcio.Application.alterarcodigo
POST        /alterarcodigo                 controllers.Proconsorcio.Application.handleAlterarCodigo
GET         /novacarta                     controllers.Proconsorcio.Application.novacarta
GET         /detalhes/:id                  controllers.Proconsorcio.Application.detalhes(id)
GET         /simulador                     controllers.Proconsorcio.Application.simulador
GET         /dadoscadastrais               controllers.Proconsorcio.Application.dadoscadastrais()
POST        /dadoscadastrais               controllers.Proconsorcio.Application.handleDadosCadastrais()
GET         /escritorio                    controllers.Proconsorcio.Application.escritorio()
GET         /faleconosco                   controllers.Proconsorcio.Application.faleconosco()
GET         /getendereco/:cep              controllers.Proconsorcio.Application.getEndereco(cep)
GET         /getuf                         controllers.Proconsorcio.Application.getUF()
GET         /getbanco                      controllers.Proconsorcio.Application.getBanco()
POST        /signupmail                    plugin.CustomRegistration.handleStartSignUpMail()

# Example of protected page
GET         /only-userpass                 controllers.Application.onlyUserPass
# Map static resources from the /public folder to the /assets URL path
#GET         /teste                             controllers.Assets.at(path = "/public/", file = "Home.html")
GET         /assets/*file                  controllers.Assets.at(path="/public", file)
# Login page
GET         /login                         securesocial.controllers.LoginPage.login
GET         /logout                        securesocial.controllers.LoginPage.logout

# User Registration and password handling (only needed if you are using UsernamePasswordProvider)
GET         /signup                        plugin.CustomRegistration.startSignUp
POST        /signup                        plugin.CustomRegistration.handleStartSignUp
GET         /signup/:token                 plugin.CustomRegistration.signUp(token)
POST        /signup/:token                 plugin.CustomRegistration.handleSignUp(token)
GET         /reset                         securesocial.controllers.Registration.startResetPassword
POST        /reset                         securesocial.controllers.Registration.handleStartResetPassword
GET         /reset/:token                  securesocial.controllers.Registration.resetPassword(token)
POST        /reset/:token                  plugin.CustomRegistration.handleResetPassword(token)
GET         /password                      securesocial.controllers.PasswordChange.page
POST        /password                      securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET         /authenticate/:provider        securesocial.controllers.ProviderController.authenticate(provider)
POST        /authenticate/:provider        securesocial.controllers.ProviderController.authenticateByPost(provider)
GET         /not-authorized                securesocial.controllers.ProviderController.notAuthorized

#master: # Providers entry points
#master: GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider, redirectTo: Option[String])
#master: POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider, redirectTo: Option[String])
#master: GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized

# Authentication information
#GET         /credentials                   controllers.Authentication.credentials
#GET         /identities                    controllers.Authentication.identities




# Webjars, requirejs, routes and other assets
#GET     /routes.js                  controllers.Application.javascriptRoutes()
#GET     /lib/require.js             controllers.WebJarAssets.requirejs
#GET     /webjars/*file              controllers.WebJarAssets.at(file)
#GET     /assets/*file               controllers.Assets.at(path="/public", file)            